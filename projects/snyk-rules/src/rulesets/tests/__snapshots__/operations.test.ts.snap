// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`empty string operationId is invalid 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": Array [
          "paths",
          "/example",
          "get",
        ],
        "kind": "operation",
        "location": "inRequest",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "condition": "have the correct operationId format",
      "error": "expected '' to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "operation: get /example",
    },
  ],
}
`;

exports[`invalid operationId case should fail 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "get-hello-world",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": Array [
          "paths",
          "/example",
          "get",
        ],
        "kind": "operation",
        "location": "inRequest",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "get-hello-world",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "condition": "have the correct operationId format",
      "error": "operationId \\"get-hello-world\\" must be formatted [get|create|list|update|delete]camelCaseResource: expected false to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "operation: get /example",
    },
  ],
}
`;

exports[`invalid operationId prefix should fail 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "findHelloWorld",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": Array [
          "paths",
          "/example",
          "get",
        ],
        "kind": "operation",
        "location": "inRequest",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "findHelloWorld",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "condition": "have the correct operationId format",
      "error": "operationId \\"findHelloWorld\\" must be formatted [get|create|list|update|delete]camelCaseResource: expected false to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "operation: get /example",
    },
  ],
}
`;

exports[`missing summary should fail 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "tags": Array [
            "Example",
          ],
        },
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "location": Object {
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": Array [
          "paths",
          "/example",
          "get",
        ],
        "kind": "operation",
        "location": "inRequest",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "condition": "have a summary",
      "error": "expected undefined to exist",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "operation: get /example",
    },
  ],
}
`;

exports[`missing tags should fail 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
        },
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "location": Object {
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": Array [
          "paths",
          "/example",
          "get",
        ],
        "kind": "operation",
        "location": "inRequest",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
        },
      },
    },
  },
  "results": Array [
    Object {
      "condition": "have tags",
      "error": "tags [] must be set on each operation: expected undefined to exist",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "operation: get /example",
    },
  ],
}
`;

exports[`undefined operationId is invalid 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "condition": "have the correct operationId format",
      "error": "expected undefined to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "operation: get /example",
    },
  ],
}
`;

exports[`with summary passes 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "I have a summary",
          "tags": Array [
            "Example",
          ],
        },
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "location": Object {
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": Array [
          "paths",
          "/example",
          "get",
        ],
        "kind": "operation",
        "location": "inRequest",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "I have a summary",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "condition": "have a summary",
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "operation: get /example",
    },
  ],
}
`;

exports[`with tags passes 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "condition": "have tags",
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "operation: get /example",
    },
  ],
}
`;
