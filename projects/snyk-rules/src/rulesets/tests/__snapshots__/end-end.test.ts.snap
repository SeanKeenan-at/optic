// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`end-end-tests fails when operation is removed 1`] = `
Array [
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
        ],
        "jsonPath": "/paths/~1thing/get",
        "kind": "operation",
      },
      "value": Object {
        "description": "List instances of thing",
        "method": "get",
        "operationId": "listThing",
        "pathPattern": "/thing",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have the correct operationId format",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 157,
      "endPosition": 3336,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 42,
      "startPosition": 1890,
    },
    "where": "requirement for operation: GET /thing",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
        ],
        "jsonPath": "/paths/~1thing/post",
        "kind": "operation",
      },
      "value": Object {
        "description": "Create a new thing",
        "method": "post",
        "operationId": "createThing",
        "pathPattern": "/thing",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have the correct operationId format",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 156,
      "endPosition": 1885,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 16,
      "startPosition": 379,
    },
    "where": "requirement for operation: POST /thing",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get",
        "kind": "operation",
      },
      "value": Object {
        "description": "Get an instance of thing",
        "method": "get",
        "operationId": "getThing",
        "pathPattern": "/thing/{thing_id}",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have the correct operationId format",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for operation: GET /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete",
        "kind": "operation",
      },
      "value": Object {
        "description": "Delete an instance of thing",
        "method": "delete",
        "operationId": "deleteThing",
        "pathPattern": "/thing/{thing_id}",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have the correct operationId format",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for operation: DELETE /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
        ],
        "jsonPath": "/paths/~1thing/get",
        "kind": "operation",
      },
      "value": Object {
        "description": "List instances of thing",
        "method": "get",
        "operationId": "listThing",
        "pathPattern": "/thing",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have tags",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 157,
      "endPosition": 3336,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 42,
      "startPosition": 1890,
    },
    "where": "requirement for operation: GET /thing",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
        ],
        "jsonPath": "/paths/~1thing/post",
        "kind": "operation",
      },
      "value": Object {
        "description": "Create a new thing",
        "method": "post",
        "operationId": "createThing",
        "pathPattern": "/thing",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have tags",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 156,
      "endPosition": 1885,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 16,
      "startPosition": 379,
    },
    "where": "requirement for operation: POST /thing",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get",
        "kind": "operation",
      },
      "value": Object {
        "description": "Get an instance of thing",
        "method": "get",
        "operationId": "getThing",
        "pathPattern": "/thing/{thing_id}",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have tags",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for operation: GET /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete",
        "kind": "operation",
      },
      "value": Object {
        "description": "Delete an instance of thing",
        "method": "delete",
        "operationId": "deleteThing",
        "pathPattern": "/thing/{thing_id}",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have tags",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for operation: DELETE /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
        ],
        "jsonPath": "/paths/~1thing/get",
        "kind": "operation",
      },
      "value": Object {
        "description": "List instances of thing",
        "method": "get",
        "operationId": "listThing",
        "pathPattern": "/thing",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have a summary",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "endLine": 157,
      "endPosition": 3336,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 42,
      "startPosition": 1890,
    },
    "where": "requirement for operation: GET /thing",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
        ],
        "jsonPath": "/paths/~1thing/post",
        "kind": "operation",
      },
      "value": Object {
        "description": "Create a new thing",
        "method": "post",
        "operationId": "createThing",
        "pathPattern": "/thing",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have a summary",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "endLine": 156,
      "endPosition": 1885,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 16,
      "startPosition": 379,
    },
    "where": "requirement for operation: POST /thing",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get",
        "kind": "operation",
      },
      "value": Object {
        "description": "Get an instance of thing",
        "method": "get",
        "operationId": "getThing",
        "pathPattern": "/thing/{thing_id}",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have a summary",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for operation: GET /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete",
        "kind": "operation",
      },
      "value": Object {
        "description": "Delete an instance of thing",
        "method": "delete",
        "operationId": "deleteThing",
        "pathPattern": "/thing/{thing_id}",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "have a summary",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for operation: DELETE /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "changed": Object {
        "after": Object {
          "description": "List instances of thing",
          "method": "get",
          "operationId": "listThing",
          "pathPattern": "/thing",
          "tags": Array [
            "Thing",
          ],
        },
        "before": Object {
          "description": "List instances of thing",
          "method": "get",
          "operationId": "listThing",
          "pathPattern": "/thing",
          "summary": "List instances of thing",
          "tags": Array [
            "Thing",
          ],
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
        ],
        "jsonPath": "/paths/~1thing/get",
        "kind": "operation",
      },
    },
    "condition": "have consistent operation IDs",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 157,
      "endPosition": 3336,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 42,
      "startPosition": 1890,
    },
    "where": "updated operation: GET /thing",
  },
  Object {
    "change": Object {
      "changed": Object {
        "after": Object {
          "description": "Create a new thing",
          "method": "post",
          "operationId": "createThing",
          "pathPattern": "/thing",
          "tags": Array [
            "Thing",
          ],
        },
        "before": Object {
          "description": "Create a new thing",
          "method": "post",
          "operationId": "createThing",
          "pathPattern": "/thing",
          "summary": "Create a new thing",
          "tags": Array [
            "Thing",
          ],
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
        ],
        "jsonPath": "/paths/~1thing/post",
        "kind": "operation",
      },
    },
    "condition": "have consistent operation IDs",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 156,
      "endPosition": 1885,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 16,
      "startPosition": 379,
    },
    "where": "updated operation: POST /thing",
  },
  Object {
    "change": Object {
      "changed": Object {
        "after": Object {
          "description": "Get an instance of thing",
          "method": "get",
          "operationId": "getThing",
          "pathPattern": "/thing/{thing_id}",
          "tags": Array [
            "Thing",
          ],
        },
        "before": Object {
          "description": "Get an instance of thing",
          "method": "get",
          "operationId": "getThing",
          "pathPattern": "/thing/{thing_id}",
          "summary": "Get an instance of thing",
          "tags": Array [
            "Thing",
          ],
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get",
        "kind": "operation",
      },
    },
    "condition": "have consistent operation IDs",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "updated operation: GET /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "changed": Object {
        "after": Object {
          "description": "Delete an instance of thing",
          "method": "delete",
          "operationId": "deleteThing",
          "pathPattern": "/thing/{thing_id}",
          "tags": Array [
            "Thing",
          ],
        },
        "before": Object {
          "description": "Delete an instance of thing",
          "method": "delete",
          "operationId": "deleteThing",
          "pathPattern": "/thing/{thing_id}",
          "summary": "Delete an instance of thing",
          "tags": Array [
            "Thing",
          ],
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete",
        "kind": "operation",
      },
    },
    "condition": "have consistent operation IDs",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "updated operation: DELETE /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
        ],
        "jsonPath": "/paths/~1thing/get",
        "kind": "operation",
      },
      "value": Object {
        "description": "List instances of thing",
        "method": "get",
        "operationId": "listThing",
        "pathPattern": "/thing",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "use the correct case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 157,
      "endPosition": 3336,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 42,
      "startPosition": 1890,
    },
    "where": "requirement for operation: GET /thing",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
        ],
        "jsonPath": "/paths/~1thing/post",
        "kind": "operation",
      },
      "value": Object {
        "description": "Create a new thing",
        "method": "post",
        "operationId": "createThing",
        "pathPattern": "/thing",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "use the correct case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 156,
      "endPosition": 1885,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 16,
      "startPosition": 379,
    },
    "where": "requirement for operation: POST /thing",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get",
        "kind": "operation",
      },
      "value": Object {
        "description": "Get an instance of thing",
        "method": "get",
        "operationId": "getThing",
        "pathPattern": "/thing/{thing_id}",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "use the correct case",
    "docsLink": undefined,
    "error": "expected parameter name thing_id to be snake case: expected false to be truthy",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for operation: GET /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete",
        "kind": "operation",
      },
      "value": Object {
        "description": "Delete an instance of thing",
        "method": "delete",
        "operationId": "deleteThing",
        "pathPattern": "/thing/{thing_id}",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "use the correct case",
    "docsLink": undefined,
    "error": "expected parameter name thing_id to be snake case: expected false to be truthy",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for operation: DELETE /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
        ],
        "jsonPath": "/paths/~1thing/get",
        "kind": "operation",
      },
      "value": Object {
        "description": "List instances of thing",
        "method": "get",
        "operationId": "listThing",
        "pathPattern": "/thing",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "include a version parameter",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 157,
      "endPosition": 3336,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 42,
      "startPosition": 1890,
    },
    "where": "requirement for operation: GET /thing",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
        ],
        "jsonPath": "/paths/~1thing/post",
        "kind": "operation",
      },
      "value": Object {
        "description": "Create a new thing",
        "method": "post",
        "operationId": "createThing",
        "pathPattern": "/thing",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "include a version parameter",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 156,
      "endPosition": 1885,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 16,
      "startPosition": 379,
    },
    "where": "requirement for operation: POST /thing",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get",
        "kind": "operation",
      },
      "value": Object {
        "description": "Get an instance of thing",
        "method": "get",
        "operationId": "getThing",
        "pathPattern": "/thing/{thing_id}",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "include a version parameter",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for operation: GET /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete",
        "kind": "operation",
      },
      "value": Object {
        "description": "Delete an instance of thing",
        "method": "delete",
        "operationId": "deleteThing",
        "pathPattern": "/thing/{thing_id}",
        "tags": Array [
          "Thing",
        ],
      },
    },
    "condition": "include a version parameter",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for operation: DELETE /thing/{thing_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "200",
          },
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200",
        "kind": "response",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "statusCode": "200",
              },
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200",
            "kind": "response",
          },
          "value": Object {
            "description": "Instance of thing is updated.",
            "statusCode": 200,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'statusCode' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed response: response undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "204",
          },
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "204",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/204",
        "kind": "response",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "statusCode": "204",
              },
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "204",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/204",
            "kind": "response",
          },
          "value": Object {
            "description": "The operation completed successfully with no content",
            "statusCode": 204,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'statusCode' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed response: response undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400",
        "kind": "response",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "statusCode": "400",
              },
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "400",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400",
            "kind": "response",
          },
          "value": Object {
            "description": "Bad Request: A parameter provided as a part of the request was invalid.",
            "statusCode": 400,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'statusCode' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed response: response undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401",
        "kind": "response",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "statusCode": "401",
              },
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "401",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401",
            "kind": "response",
          },
          "value": Object {
            "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
            "statusCode": 401,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'statusCode' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed response: response undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403",
        "kind": "response",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "statusCode": "403",
              },
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "403",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403",
            "kind": "response",
          },
          "value": Object {
            "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
            "statusCode": 403,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'statusCode' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed response: response undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404",
        "kind": "response",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "statusCode": "404",
              },
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "404",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404",
            "kind": "response",
          },
          "value": Object {
            "description": "Not Found: The resource being operated on could not be found.",
            "statusCode": 404,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'statusCode' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed response: response undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409",
        "kind": "response",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "statusCode": "409",
              },
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "409",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409",
            "kind": "response",
          },
          "value": Object {
            "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
            "statusCode": 409,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'statusCode' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed response: response undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500",
        "kind": "response",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "statusCode": "500",
              },
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "500",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500",
            "kind": "response",
          },
          "value": Object {
            "description": "Internal Server Error: An error was encountered while attempting to process the request.",
            "statusCode": 500,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'statusCode' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed response: response undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 61,
      "endPosition": 166,
      "filePath": "/api-standards/components/headers/headers.yaml",
      "preview": "",
      "startLine": 1,
      "startPosition": 0,
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 61,
      "endPosition": 334,
      "filePath": "/api-standards/components/headers/headers.yaml",
      "preview": "",
      "startLine": 5,
      "startPosition": 168,
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 57,
      "endPosition": 1527,
      "filePath": "/api-standards/components/headers/headers.yaml",
      "preview": "",
      "startLine": 44,
      "startPosition": 1294,
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 49,
      "endPosition": 662,
      "filePath": "/api-standards/components/headers/headers.yaml",
      "preview": "",
      "startLine": 9,
      "startPosition": 336,
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "endLine": 55,
      "endPosition": 959,
      "filePath": "/api-standards/components/headers/headers.yaml",
      "preview": "",
      "startLine": 23,
      "startPosition": 662,
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "endLine": 54,
      "endPosition": 1292,
      "filePath": "/api-standards/components/headers/headers.yaml",
      "preview": "",
      "startLine": 33,
      "startPosition": 961,
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "204",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "204",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/204/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "204",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "204",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/204/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "204",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "204",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/204/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "204",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "204",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/204/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "204",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "204",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/204/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "204",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "204",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/204/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "400",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "400",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "400",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "400",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "400",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "400",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "401",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "401",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "401",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "401",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "401",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "401",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "403",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "403",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "403",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "403",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "403",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "403",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "404",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "404",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "404",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "404",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "404",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "404",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "409",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "409",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "409",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "409",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "409",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "409",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "500",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/headers/snyk-version-requested",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "name": "snyk-version-requested",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-requested",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "500",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/headers/snyk-version-served",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "name": "snyk-version-served",
        "schema": Object {
          "pattern": "^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-served",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "500",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/headers/snyk-request-id",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-request-id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "500",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "500",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/headers/deprecation",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header deprecation",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "500",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/headers/sunset",
        "kind": "response-header",
      },
      "value": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
    },
    "condition": "be kebab case",
    "docsLink": undefined,
    "error": "expected false to be true",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response-header: response header sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200",
        "kind": "response",
      },
      "value": Object {
        "description": "Returns a list of thing instances",
        "statusCode": 200,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 170,
      "endPosition": 2981,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 50,
      "startPosition": 2113,
    },
    "where": "requirement for response: response 200",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400",
        "kind": "response",
      },
      "value": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": 400,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 400",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401",
        "kind": "response",
      },
      "value": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": 401,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 401",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403",
        "kind": "response",
      },
      "value": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": 403,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 403",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404",
        "kind": "response",
      },
      "value": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": 404,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 404",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500",
        "kind": "response",
      },
      "value": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": 500,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 500",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201",
        "kind": "response",
      },
      "value": Object {
        "description": "Created thing successfully",
        "statusCode": 201,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 170,
      "endPosition": 1459,
      "filePath": "/api-standards/resources/thing/2021-11-10/001-fail-operation-removed.yaml",
      "preview": "",
      "startLine": 24,
      "startPosition": 600,
    },
    "where": "requirement for response: response 201",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400",
        "kind": "response",
      },
      "value": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": 400,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 1,
      "endPosition": 703,
      "filePath": "/api-standards/components/responses/400.yaml",
      "preview": "",
      "startLine": 1,
      "startPosition": 0,
    },
    "where": "requirement for response: response 400",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401",
        "kind": "response",
      },
      "value": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": 401,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 1,
      "endPosition": 724,
      "filePath": "/api-standards/components/responses/401.yaml",
      "preview": "",
      "startLine": 1,
      "startPosition": 0,
    },
    "where": "requirement for response: response 401",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403",
        "kind": "response",
      },
      "value": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": 403,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 1,
      "endPosition": 724,
      "filePath": "/api-standards/components/responses/403.yaml",
      "preview": "",
      "startLine": 1,
      "startPosition": 0,
    },
    "where": "requirement for response: response 403",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404",
        "kind": "response",
      },
      "value": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": 404,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 1,
      "endPosition": 693,
      "filePath": "/api-standards/components/responses/404.yaml",
      "preview": "",
      "startLine": 1,
      "startPosition": 0,
    },
    "where": "requirement for response: response 404",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409",
        "kind": "response",
      },
      "value": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": 409,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 1,
      "endPosition": 727,
      "filePath": "/api-standards/components/responses/409.yaml",
      "preview": "",
      "startLine": 1,
      "startPosition": 0,
    },
    "where": "requirement for response: response 409",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500",
        "kind": "response",
      },
      "value": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": 500,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "endLine": 1,
      "endPosition": 720,
      "filePath": "/api-standards/components/responses/500.yaml",
      "preview": "",
      "startLine": 1,
      "startPosition": 0,
    },
    "where": "requirement for response: response 500",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "200",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200",
        "kind": "response",
      },
      "value": Object {
        "description": "Returns an instance of thing",
        "statusCode": 200,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 200",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400",
        "kind": "response",
      },
      "value": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": 400,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 400",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401",
        "kind": "response",
      },
      "value": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": 401,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 401",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403",
        "kind": "response",
      },
      "value": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": 403,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 403",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404",
        "kind": "response",
      },
      "value": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": 404,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 404",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500",
        "kind": "response",
      },
      "value": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": 500,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 500",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "204",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "204",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/204",
        "kind": "response",
      },
      "value": Object {
        "description": "The operation completed successfully with no content",
        "statusCode": 204,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 204",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400",
        "kind": "response",
      },
      "value": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": 400,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 400",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401",
        "kind": "response",
      },
      "value": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": 401,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 401",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403",
        "kind": "response",
      },
      "value": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": 403,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 403",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404",
        "kind": "response",
      },
      "value": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": 404,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 404",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409",
        "kind": "response",
      },
      "value": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": 409,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 409",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500",
        "kind": "response",
      },
      "value": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": 500,
      },
    },
    "condition": "have all headers",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for response: response 500",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "array",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": "d5b640e5-d88c-4c17-9bf0-93597b7a1ce2",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "type",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "type",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/type",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "type",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field type",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field attributes",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "name",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "name",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/name",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Name of this instance of thing.",
          "example": "thing",
          "type": "string",
        },
        "key": "name",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field name",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "created",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "created",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/created",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was created.",
          "example": "2021-10-05T13:23:17Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "created",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field created",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "updated",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "updated",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/updated",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was last updated.",
          "example": "2021-10-05T13:25:29Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "updated",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field updated",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "description",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "description",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/description",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "User-friendly description of this instance of thing.",
          "example": "This is a thing named thing.",
          "type": "string",
        },
        "key": "description",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field description",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field relationships",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "example",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field example",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "data",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "data",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
        },
        "key": "data",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "links",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "links",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "links",
            "related",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "links",
          "related",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/links/properties/related",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "related",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field related",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "first",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "first",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/first",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "first",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field first",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "last",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "last",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/last",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "last",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field last",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "prev",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "prev",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/prev",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "prev",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field prev",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "next",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "next",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/next",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "next",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field next",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "description": "thing resource object",
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": "d5b640e5-d88c-4c17-9bf0-93597b7a1ce2",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "type",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "type",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/type",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "type",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field type",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field attributes",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "name",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "name",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/name",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Name of this instance of thing.",
          "example": "thing",
          "type": "string",
        },
        "key": "name",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field name",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "created",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "created",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/created",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was created.",
          "example": "2021-10-05T13:23:17Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "created",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field created",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "updated",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "updated",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/updated",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was last updated.",
          "example": "2021-10-05T13:25:29Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "updated",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field updated",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "description",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "description",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/description",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "User-friendly description of this instance of thing.",
          "example": "This is a thing named thing.",
          "type": "string",
        },
        "key": "description",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field description",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field relationships",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "example",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field example",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "data",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "data",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
        },
        "key": "data",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
            "related",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
          "related",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links/properties/related",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "related",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field related",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "links",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "links",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "links",
            "self",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "links",
          "self",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/links/properties/self",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "self",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field self",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "description": "thing resource object",
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": "d5b640e5-d88c-4c17-9bf0-93597b7a1ce2",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "type",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "type",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/type",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "type",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field type",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field attributes",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "name",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "name",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/name",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Name of this instance of thing.",
          "example": "thing",
          "type": "string",
        },
        "key": "name",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field name",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "created",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "created",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/created",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was created.",
          "example": "2021-10-05T13:23:17Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "created",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field created",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "updated",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "updated",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/updated",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was last updated.",
          "example": "2021-10-05T13:25:29Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "updated",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field updated",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "description",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "description",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/description",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "User-friendly description of this instance of thing.",
          "example": "This is a thing named thing.",
          "type": "string",
        },
        "key": "description",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field description",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field relationships",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "example",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field example",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "data",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "data",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
        },
        "key": "data",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
            "related",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
          "related",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links/properties/related",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "related",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field related",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "self",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "self",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/self",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "self",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field self",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have camel case keys",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "array",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": "d5b640e5-d88c-4c17-9bf0-93597b7a1ce2",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "type",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "type",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/type",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "type",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field type",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field attributes",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "name",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "name",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/name",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Name of this instance of thing.",
          "example": "thing",
          "type": "string",
        },
        "key": "name",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field name",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "created",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "created",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/created",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was created.",
          "example": "2021-10-05T13:23:17Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "created",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field created",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "updated",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "updated",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/updated",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was last updated.",
          "example": "2021-10-05T13:25:29Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "updated",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field updated",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "description",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "description",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/description",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "User-friendly description of this instance of thing.",
          "example": "This is a thing named thing.",
          "type": "string",
        },
        "key": "description",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field description",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field relationships",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "example",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field example",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "data",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "data",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
        },
        "key": "data",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "links",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "links",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "links",
            "related",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "links",
          "related",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/links/properties/related",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "related",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field related",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "first",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "first",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/first",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "first",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field first",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "last",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "last",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/last",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "last",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field last",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "prev",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "prev",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/prev",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "prev",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field prev",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "next",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "next",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/next",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "next",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field next",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "description": "thing resource object",
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": "d5b640e5-d88c-4c17-9bf0-93597b7a1ce2",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "type",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "type",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/type",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "type",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field type",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field attributes",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "name",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "name",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/name",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Name of this instance of thing.",
          "example": "thing",
          "type": "string",
        },
        "key": "name",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field name",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "created",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "created",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/created",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was created.",
          "example": "2021-10-05T13:23:17Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "created",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field created",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "updated",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "updated",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/updated",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was last updated.",
          "example": "2021-10-05T13:25:29Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "updated",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field updated",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "description",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "description",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/description",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "User-friendly description of this instance of thing.",
          "example": "This is a thing named thing.",
          "type": "string",
        },
        "key": "description",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field description",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field relationships",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "example",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field example",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "data",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "data",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
        },
        "key": "data",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
            "related",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
          "related",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links/properties/related",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "related",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field related",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "links",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "links",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "links",
            "self",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "links",
          "self",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/links/properties/self",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "self",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field self",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "description": "thing resource object",
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": "d5b640e5-d88c-4c17-9bf0-93597b7a1ce2",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "type",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "type",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/type",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "type",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field type",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field attributes",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "name",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "name",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/name",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Name of this instance of thing.",
          "example": "thing",
          "type": "string",
        },
        "key": "name",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field name",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "created",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "created",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/created",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was created.",
          "example": "2021-10-05T13:23:17Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "created",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field created",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "updated",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "updated",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/updated",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was last updated.",
          "example": "2021-10-05T13:25:29Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "updated",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field updated",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "description",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "description",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/description",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "User-friendly description of this instance of thing.",
          "example": "This is a thing named thing.",
          "type": "string",
        },
        "key": "description",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field description",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field relationships",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "example",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field example",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "data",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "data",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
        },
        "key": "data",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
            "related",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
          "related",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links/properties/related",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "related",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field related",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "self",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "self",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/self",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "self",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field self",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have an example",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "array",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": "d5b640e5-d88c-4c17-9bf0-93597b7a1ce2",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "type",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "type",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/type",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "type",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field type",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field attributes",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "name",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "name",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/name",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Name of this instance of thing.",
          "example": "thing",
          "type": "string",
        },
        "key": "name",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field name",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "created",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "created",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/created",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was created.",
          "example": "2021-10-05T13:23:17Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "created",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field created",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "updated",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "updated",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/updated",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was last updated.",
          "example": "2021-10-05T13:25:29Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "updated",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field updated",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "attributes",
            "description",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "attributes",
          "description",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/attributes/properties/description",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "User-friendly description of this instance of thing.",
          "example": "This is a thing named thing.",
          "type": "string",
        },
        "key": "description",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field description",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field relationships",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "example",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field example",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "data",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "data",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
        },
        "key": "data",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "links",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "links",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "links",
            "related",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "links",
          "related",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/links/properties/related",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "related",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field related",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "items",
            "relationships",
            "example",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "items",
          "relationships",
          "example",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/data/items/properties/relationships/properties/example/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "first",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "first",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/first",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "first",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field first",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "last",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "last",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/last",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "last",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field last",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "prev",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "prev",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/prev",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "prev",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field prev",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "next",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "next",
        ],
        "jsonPath": "/paths/~1thing/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/next",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "next",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field next",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "description": "thing resource object",
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": "d5b640e5-d88c-4c17-9bf0-93597b7a1ce2",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "type",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "type",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/type",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "type",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field type",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field attributes",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "name",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "name",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/name",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Name of this instance of thing.",
          "example": "thing",
          "type": "string",
        },
        "key": "name",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field name",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "created",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "created",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/created",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was created.",
          "example": "2021-10-05T13:23:17Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "created",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field created",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "updated",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "updated",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/updated",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was last updated.",
          "example": "2021-10-05T13:25:29Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "updated",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field updated",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "description",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "attributes",
          "description",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/description",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "User-friendly description of this instance of thing.",
          "example": "This is a thing named thing.",
          "type": "string",
        },
        "key": "description",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field description",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field relationships",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "example",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field example",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "data",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "data",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
        },
        "key": "data",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
            "related",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
          "related",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links/properties/related",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "related",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field related",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "links",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "links",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "201",
          },
          "jsonSchemaTrail": Array [
            "links",
            "self",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "201",
          "application/vnd.api+json",
          "links",
          "self",
        ],
        "jsonPath": "/paths/~1thing/post/responses/201/content/application~1vnd.api+json/schema/properties/links/properties/self",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "self",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field self",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "description": "thing resource object",
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": "d5b640e5-d88c-4c17-9bf0-93597b7a1ce2",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "type",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "type",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/type",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "type",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field type",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field attributes",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "name",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "name",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/name",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Name of this instance of thing.",
          "example": "thing",
          "type": "string",
        },
        "key": "name",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field name",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "created",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "created",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/created",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was created.",
          "example": "2021-10-05T13:23:17Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "created",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field created",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "updated",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "updated",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/updated",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Timestamp when this instance of thing was last updated.",
          "example": "2021-10-05T13:25:29Z",
          "format": "date-time",
          "type": "string",
        },
        "key": "updated",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field updated",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "description",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "description",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/description",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "User-friendly description of this instance of thing.",
          "example": "This is a thing named thing.",
          "type": "string",
        },
        "key": "description",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field description",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field relationships",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "example",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field example",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "data",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "data",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/data",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
        },
        "key": "data",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field data",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
            "related",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
          "related",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links/properties/related",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "related",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field related",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/links",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "links",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field links",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "self",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "self",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/self",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "oneOf": Array [
            Object {
              "type": "string",
            },
            Object {
              "additionalProperties": false,
              "properties": Object {
                "href": Object {
                  "type": "string",
                },
                "meta": Object {
                  "additionalProperties": true,
                  "type": "object",
                },
              },
              "required": Array [
                "href",
              ],
              "type": "object",
            },
          ],
        },
        "key": "self",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field self",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "get",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "get",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/get/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "error": "expected undefined to exist",
    "isMust": false,
    "isShould": true,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "delete",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "delete",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/delete/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have a format when a string",
    "docsLink": undefined,
    "isMust": false,
    "isShould": true,
    "passed": true,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "requirement for field: field meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "jsonapi",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "jsonapi",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
                "version",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "jsonapi",
              "version",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "version",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "description": "thing resource object",
              "type": "object",
            },
            "key": "data",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "id",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/id",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "id",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "id",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/id",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "example": "d5b640e5-d88c-4c17-9bf0-93597b7a1ce2",
              "format": "uuid",
              "type": "string",
            },
            "key": "id",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "type",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "type",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/type",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "type",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "type",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/type",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "type",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "attributes",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "attributes",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "attributes",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "name",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "name",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/name",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "attributes",
                "name",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "attributes",
              "name",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/name",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "description": "Name of this instance of thing.",
              "example": "thing",
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "created",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "created",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/created",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "attributes",
                "created",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "attributes",
              "created",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/created",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "description": "Timestamp when this instance of thing was created.",
              "example": "2021-10-05T13:23:17Z",
              "format": "date-time",
              "type": "string",
            },
            "key": "created",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "updated",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "updated",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/updated",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "attributes",
                "updated",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "attributes",
              "updated",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/updated",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "description": "Timestamp when this instance of thing was last updated.",
              "example": "2021-10-05T13:25:29Z",
              "format": "date-time",
              "type": "string",
            },
            "key": "updated",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "attributes",
            "description",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "attributes",
          "description",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/description",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "attributes",
                "description",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "attributes",
              "description",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/attributes/properties/description",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "description": "User-friendly description of this instance of thing.",
              "example": "This is a thing named thing.",
              "type": "string",
            },
            "key": "description",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "relationships",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "relationships",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "relationships",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "relationships",
                "example",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "relationships",
              "example",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "object",
            },
            "key": "example",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "data",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "data",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/data",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "relationships",
                "example",
                "data",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "relationships",
              "example",
              "data",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/data",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
            },
            "key": "data",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "relationships",
                "example",
                "links",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "relationships",
              "example",
              "links",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "links",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "links",
            "related",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "links",
          "related",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links/properties/related",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "relationships",
                "example",
                "links",
                "related",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "relationships",
              "example",
              "links",
              "related",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/links/properties/related",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "oneOf": Array [
                Object {
                  "type": "string",
                },
                Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "href": Object {
                      "type": "string",
                    },
                    "meta": Object {
                      "additionalProperties": true,
                      "type": "object",
                    },
                  },
                  "required": Array [
                    "href",
                  ],
                  "type": "object",
                },
              ],
            },
            "key": "related",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "data",
            "relationships",
            "example",
            "meta",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "data",
          "relationships",
          "example",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/meta",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "data",
                "relationships",
                "example",
                "meta",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "data",
              "relationships",
              "example",
              "meta",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/data/properties/relationships/properties/example/properties/meta",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": true,
              "type": "object",
            },
            "key": "meta",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/links",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "links",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "links",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/links",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "links",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": Array [
            "links",
            "self",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "200",
          "application/vnd.api+json",
          "links",
          "self",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/self",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "200",
              },
              "jsonSchemaTrail": Array [
                "links",
                "self",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "200",
              "application/vnd.api+json",
              "links",
              "self",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/200/content/application~1vnd.api+json/schema/properties/links/properties/self",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "oneOf": Array [
                Object {
                  "type": "string",
                },
                Object {
                  "additionalProperties": false,
                  "properties": Object {
                    "href": Object {
                      "type": "string",
                    },
                    "meta": Object {
                      "additionalProperties": true,
                      "type": "object",
                    },
                  },
                  "required": Array [
                    "href",
                  ],
                  "type": "object",
                },
              ],
            },
            "key": "self",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "400",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "400",
              "application/vnd.api+json",
              "jsonapi",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "jsonapi",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "400",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
                "version",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "400",
              "application/vnd.api+json",
              "jsonapi",
              "version",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "version",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "400",
              },
              "jsonSchemaTrail": Array [
                "errors",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "400",
              "application/vnd.api+json",
              "errors",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "minItems": 1,
              "type": "array",
            },
            "key": "errors",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "400",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "id",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "400",
              "application/vnd.api+json",
              "errors",
              "items",
              "id",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "format": "uuid",
              "type": "string",
            },
            "key": "id",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "400",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "status",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "400",
              "application/vnd.api+json",
              "errors",
              "items",
              "status",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "status",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "400",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "detail",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "400",
              "application/vnd.api+json",
              "errors",
              "items",
              "detail",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "detail",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "400",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "400",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "source",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "400",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "pointer",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "400",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "pointer",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "pointer",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "400",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "parameter",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "400",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "parameter",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "parameter",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "400",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "meta",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "400",
              "application/vnd.api+json",
              "errors",
              "items",
              "meta",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": true,
              "type": "object",
            },
            "key": "meta",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "401",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "401",
              "application/vnd.api+json",
              "jsonapi",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "jsonapi",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "401",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
                "version",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "401",
              "application/vnd.api+json",
              "jsonapi",
              "version",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "version",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "401",
              },
              "jsonSchemaTrail": Array [
                "errors",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "401",
              "application/vnd.api+json",
              "errors",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "minItems": 1,
              "type": "array",
            },
            "key": "errors",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "401",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "id",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "401",
              "application/vnd.api+json",
              "errors",
              "items",
              "id",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "format": "uuid",
              "type": "string",
            },
            "key": "id",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "401",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "status",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "401",
              "application/vnd.api+json",
              "errors",
              "items",
              "status",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "status",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "401",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "detail",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "401",
              "application/vnd.api+json",
              "errors",
              "items",
              "detail",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "detail",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "401",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "401",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "source",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "401",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "pointer",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "401",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "pointer",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "pointer",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "401",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "parameter",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "401",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "parameter",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "parameter",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "401",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "meta",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "401",
              "application/vnd.api+json",
              "errors",
              "items",
              "meta",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": true,
              "type": "object",
            },
            "key": "meta",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "403",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "403",
              "application/vnd.api+json",
              "jsonapi",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "jsonapi",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "403",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
                "version",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "403",
              "application/vnd.api+json",
              "jsonapi",
              "version",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "version",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "403",
              },
              "jsonSchemaTrail": Array [
                "errors",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "403",
              "application/vnd.api+json",
              "errors",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "minItems": 1,
              "type": "array",
            },
            "key": "errors",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "403",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "id",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "403",
              "application/vnd.api+json",
              "errors",
              "items",
              "id",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "format": "uuid",
              "type": "string",
            },
            "key": "id",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "403",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "status",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "403",
              "application/vnd.api+json",
              "errors",
              "items",
              "status",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "status",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "403",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "detail",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "403",
              "application/vnd.api+json",
              "errors",
              "items",
              "detail",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "detail",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "403",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "403",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "source",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "403",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "pointer",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "403",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "pointer",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "pointer",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "403",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "parameter",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "403",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "parameter",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "parameter",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "403",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "meta",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "403",
              "application/vnd.api+json",
              "errors",
              "items",
              "meta",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": true,
              "type": "object",
            },
            "key": "meta",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "404",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "404",
              "application/vnd.api+json",
              "jsonapi",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "jsonapi",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "404",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
                "version",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "404",
              "application/vnd.api+json",
              "jsonapi",
              "version",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "version",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "404",
              },
              "jsonSchemaTrail": Array [
                "errors",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "404",
              "application/vnd.api+json",
              "errors",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "minItems": 1,
              "type": "array",
            },
            "key": "errors",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "404",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "id",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "404",
              "application/vnd.api+json",
              "errors",
              "items",
              "id",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "format": "uuid",
              "type": "string",
            },
            "key": "id",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "404",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "status",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "404",
              "application/vnd.api+json",
              "errors",
              "items",
              "status",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "status",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "404",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "detail",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "404",
              "application/vnd.api+json",
              "errors",
              "items",
              "detail",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "detail",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "404",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "404",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "source",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "404",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "pointer",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "404",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "pointer",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "pointer",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "404",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "parameter",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "404",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "parameter",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "parameter",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "404",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "meta",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "404",
              "application/vnd.api+json",
              "errors",
              "items",
              "meta",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": true,
              "type": "object",
            },
            "key": "meta",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "409",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "409",
              "application/vnd.api+json",
              "jsonapi",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "jsonapi",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "409",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
                "version",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "409",
              "application/vnd.api+json",
              "jsonapi",
              "version",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "version",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "409",
              },
              "jsonSchemaTrail": Array [
                "errors",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "409",
              "application/vnd.api+json",
              "errors",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "minItems": 1,
              "type": "array",
            },
            "key": "errors",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "409",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "id",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "409",
              "application/vnd.api+json",
              "errors",
              "items",
              "id",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "format": "uuid",
              "type": "string",
            },
            "key": "id",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "409",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "status",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "409",
              "application/vnd.api+json",
              "errors",
              "items",
              "status",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "status",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "409",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "detail",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "409",
              "application/vnd.api+json",
              "errors",
              "items",
              "detail",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "detail",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "409",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "409",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "source",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "409",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "pointer",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "409",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "pointer",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "pointer",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "409",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "parameter",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "409",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "parameter",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "parameter",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "409",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "meta",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "409",
              "application/vnd.api+json",
              "errors",
              "items",
              "meta",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": true,
              "type": "object",
            },
            "key": "meta",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "500",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "500",
              "application/vnd.api+json",
              "jsonapi",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "jsonapi",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "500",
              },
              "jsonSchemaTrail": Array [
                "jsonapi",
                "version",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "500",
              "application/vnd.api+json",
              "jsonapi",
              "version",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "version",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "500",
              },
              "jsonSchemaTrail": Array [
                "errors",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "500",
              "application/vnd.api+json",
              "errors",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "minItems": 1,
              "type": "array",
            },
            "key": "errors",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "500",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "id",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "500",
              "application/vnd.api+json",
              "errors",
              "items",
              "id",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "format": "uuid",
              "type": "string",
            },
            "key": "id",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "500",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "status",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "500",
              "application/vnd.api+json",
              "errors",
              "items",
              "status",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "status",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "500",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "detail",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "500",
              "application/vnd.api+json",
              "errors",
              "items",
              "detail",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "detail",
            "required": true,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "500",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "500",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": false,
              "type": "object",
            },
            "key": "source",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "500",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "pointer",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "500",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "pointer",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "pointer",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "500",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "source",
                "parameter",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "500",
              "application/vnd.api+json",
              "errors",
              "items",
              "source",
              "parameter",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "parameter",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "patch",
          "path": "/thing/{thing_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/thing/{}",
          "patch",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "removed": Object {
        "before": Object {
          "location": Object {
            "conceptualLocation": Object {
              "inResponse": Object {
                "body": Object {
                  "contentType": "application/vnd.api+json",
                },
                "statusCode": "500",
              },
              "jsonSchemaTrail": Array [
                "errors",
                "items",
                "meta",
              ],
              "method": "patch",
              "path": "/thing/{thing_id}",
            },
            "conceptualPath": Array [
              "operations",
              "/thing/{}",
              "patch",
              "responses",
              "500",
              "application/vnd.api+json",
              "errors",
              "items",
              "meta",
            ],
            "jsonPath": "/paths/~1thing~1{thing_id}/patch/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
            "kind": "field",
          },
          "value": Object {
            "flatSchema": Object {
              "additionalProperties": true,
              "type": "object",
            },
            "key": "meta",
            "required": false,
          },
        },
      },
    },
    "condition": "not be removed",
    "docsLink": undefined,
    "error": "Cannot read property 'key' of undefined",
    "isMust": true,
    "isShould": false,
    "passed": false,
    "sourcemap": Object {
      "filePath": undefined,
      "preview": "",
    },
    "where": "removed field: field undefined",
  },
]
`;
