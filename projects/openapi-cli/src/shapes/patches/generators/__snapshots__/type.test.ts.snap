// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`type shape patch generator when provided with an array, it can apply patches 1`] = `
Array [
  Object {
    "description": "make stringField oneOf",
    "groupedOperations": Array [
      Object {
        "diff": Object {
          "description": "'stringField' did not match schema",
          "example": Array [
            "1",
            "2",
            "3",
            true,
          ],
          "instancePath": "/stringField",
          "key": "stringField",
          "keyword": "type",
          "kind": "UnmatchedType",
          "propertyPath": "/properties/stringField",
        },
        "intent": "replace stringField with a one of containing both types",
        "operations": Array [
          Object {
            "op": "remove",
            "path": "/properties/stringField/type",
          },
          Object {
            "op": "add",
            "path": "/properties/stringField/oneOf",
            "value": Array [
              Object {
                "type": "string",
              },
              Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            ],
          },
        ],
      },
    ],
    "impact": Array [
      "Addition",
      "BackwardsCompatibilityUnknown",
    ],
  },
  Object {
    "description": "change type of stringField",
    "groupedOperations": Array [
      Object {
        "diff": Object {
          "description": "'stringField' did not match schema",
          "example": Array [
            "1",
            "2",
            "3",
            true,
          ],
          "instancePath": "/stringField",
          "key": "stringField",
          "keyword": "type",
          "kind": "UnmatchedType",
          "propertyPath": "/properties/stringField",
        },
        "intent": "change stringField type",
        "operations": Array [
          Object {
            "op": "replace",
            "path": "/properties/stringField",
            "value": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
          },
        ],
      },
    ],
    "impact": Array [
      "BackwardsIncompatible",
    ],
  },
]
`;

exports[`type shape patch generator when provided with an object, it can apply patches 1`] = `
Array [
  Object {
    "description": "make stringField oneOf",
    "groupedOperations": Array [
      Object {
        "diff": Object {
          "description": "'stringField' did not match schema",
          "example": Object {
            "field": "string",
          },
          "instancePath": "/stringField",
          "key": "stringField",
          "keyword": "type",
          "kind": "UnmatchedType",
          "propertyPath": "/properties/stringField",
        },
        "intent": "replace stringField with a one of containing both types",
        "operations": Array [
          Object {
            "op": "remove",
            "path": "/properties/stringField/type",
          },
          Object {
            "op": "add",
            "path": "/properties/stringField/oneOf",
            "value": Array [
              Object {
                "type": "string",
              },
              Object {
                "type": "object",
              },
            ],
          },
        ],
      },
    ],
    "impact": Array [
      "Addition",
      "BackwardsCompatibilityUnknown",
    ],
  },
  Object {
    "description": "change type of stringField",
    "groupedOperations": Array [
      Object {
        "diff": Object {
          "description": "'stringField' did not match schema",
          "example": Object {
            "field": "string",
          },
          "instancePath": "/stringField",
          "key": "stringField",
          "keyword": "type",
          "kind": "UnmatchedType",
          "propertyPath": "/properties/stringField",
        },
        "intent": "change stringField type",
        "operations": Array [
          Object {
            "op": "replace",
            "path": "/properties/stringField",
            "value": Object {
              "type": "object",
            },
          },
        ],
      },
    ],
    "impact": Array [
      "BackwardsIncompatible",
    ],
  },
]
`;

exports[`type shape patch generator when provided with another primitive, it can apply patches 1`] = `
Array [
  Object {
    "description": "make stringField oneOf",
    "groupedOperations": Array [
      Object {
        "diff": Object {
          "description": "'stringField' did not match schema",
          "example": 123,
          "instancePath": "/stringField",
          "key": "stringField",
          "keyword": "type",
          "kind": "UnmatchedType",
          "propertyPath": "/properties/stringField",
        },
        "intent": "replace stringField with a one of containing both types",
        "operations": Array [
          Object {
            "op": "remove",
            "path": "/properties/stringField/type",
          },
          Object {
            "op": "add",
            "path": "/properties/stringField/oneOf",
            "value": Array [
              Object {
                "type": "string",
              },
              Object {
                "type": "number",
              },
            ],
          },
        ],
      },
    ],
    "impact": Array [
      "Addition",
      "BackwardsCompatibilityUnknown",
    ],
  },
  Object {
    "description": "change type of stringField",
    "groupedOperations": Array [
      Object {
        "diff": Object {
          "description": "'stringField' did not match schema",
          "example": 123,
          "instancePath": "/stringField",
          "key": "stringField",
          "keyword": "type",
          "kind": "UnmatchedType",
          "propertyPath": "/properties/stringField",
        },
        "intent": "change stringField type",
        "operations": Array [
          Object {
            "op": "replace",
            "path": "/properties/stringField",
            "value": Object {
              "type": "number",
            },
          },
        ],
      },
    ],
    "impact": Array [
      "BackwardsIncompatible",
    ],
  },
]
`;

exports[`type shape patch generator when provided with null value, it can apply patches 1`] = `
Array [
  Object {
    "description": "make stringField oneOf",
    "groupedOperations": Array [
      Object {
        "diff": Object {
          "description": "'stringField' did not match schema",
          "example": null,
          "instancePath": "/stringField",
          "key": "stringField",
          "keyword": "type",
          "kind": "UnmatchedType",
          "propertyPath": "/properties/stringField",
        },
        "intent": "replace stringField with a one of containing both types",
        "operations": Array [
          Object {
            "op": "remove",
            "path": "/properties/stringField/type",
          },
          Object {
            "op": "add",
            "path": "/properties/stringField/oneOf",
            "value": Array [
              Object {
                "type": "string",
              },
              Object {
                "type": "null",
              },
            ],
          },
        ],
      },
    ],
    "impact": Array [
      "Addition",
      "BackwardsCompatibilityUnknown",
    ],
  },
  Object {
    "description": "change type of stringField",
    "groupedOperations": Array [
      Object {
        "diff": Object {
          "description": "'stringField' did not match schema",
          "example": null,
          "instancePath": "/stringField",
          "key": "stringField",
          "keyword": "type",
          "kind": "UnmatchedType",
          "propertyPath": "/properties/stringField",
        },
        "intent": "change stringField type",
        "operations": Array [
          Object {
            "op": "replace",
            "path": "/properties/stringField",
            "value": Object {
              "type": "null",
            },
          },
        ],
      },
    ],
    "impact": Array [
      "BackwardsIncompatible",
    ],
  },
]
`;
