// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `shapehash.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct FieldDescriptor {
    // message fields
    pub key: ::std::string::String,
    pub hash: ::protobuf::SingularPtrField<ShapeDescriptor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldDescriptor {
    fn default() -> &'a FieldDescriptor {
        <FieldDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl FieldDescriptor {
    pub fn new() -> FieldDescriptor {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // .optic_shape_hash.ShapeDescriptor hash = 2;


    pub fn get_hash(&self) -> &ShapeDescriptor {
        self.hash.as_ref().unwrap_or_else(|| <ShapeDescriptor as ::protobuf::Message>::default_instance())
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    pub fn has_hash(&self) -> bool {
        self.hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ShapeDescriptor) {
        self.hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ShapeDescriptor {
        if self.hash.is_none() {
            self.hash.set_default();
        }
        self.hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_hash(&mut self) -> ShapeDescriptor {
        self.hash.take().unwrap_or_else(|| ShapeDescriptor::new())
    }
}

impl ::protobuf::Message for FieldDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.hash {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if let Some(ref v) = self.hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if let Some(ref v) = self.hash.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FieldDescriptor {
        FieldDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &FieldDescriptor| { &m.key },
                |m: &mut FieldDescriptor| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ShapeDescriptor>>(
                "hash",
                |m: &FieldDescriptor| { &m.hash },
                |m: &mut FieldDescriptor| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FieldDescriptor>(
                "FieldDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FieldDescriptor {
        static instance: ::protobuf::rt::LazyV2<FieldDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FieldDescriptor::new)
    }
}

impl ::protobuf::Clear for FieldDescriptor {
    fn clear(&mut self) {
        self.key.clear();
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShapeDescriptor {
    // message fields
    pub field_type: ShapeDescriptor_PrimitiveType,
    pub fields: ::protobuf::RepeatedField<FieldDescriptor>,
    pub items: ::protobuf::RepeatedField<ShapeDescriptor>,
    pub rules: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShapeDescriptor {
    fn default() -> &'a ShapeDescriptor {
        <ShapeDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl ShapeDescriptor {
    pub fn new() -> ShapeDescriptor {
        ::std::default::Default::default()
    }

    // .optic_shape_hash.ShapeDescriptor.PrimitiveType type = 1;


    pub fn get_field_type(&self) -> ShapeDescriptor_PrimitiveType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ShapeDescriptor_PrimitiveType::OBJECT;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ShapeDescriptor_PrimitiveType) {
        self.field_type = v;
    }

    // repeated .optic_shape_hash.FieldDescriptor fields = 2;


    pub fn get_fields(&self) -> &[FieldDescriptor] {
        &self.fields
    }
    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: ::protobuf::RepeatedField<FieldDescriptor>) {
        self.fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fields(&mut self) -> &mut ::protobuf::RepeatedField<FieldDescriptor> {
        &mut self.fields
    }

    // Take field
    pub fn take_fields(&mut self) -> ::protobuf::RepeatedField<FieldDescriptor> {
        ::std::mem::replace(&mut self.fields, ::protobuf::RepeatedField::new())
    }

    // repeated .optic_shape_hash.ShapeDescriptor items = 3;


    pub fn get_items(&self) -> &[ShapeDescriptor] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::protobuf::RepeatedField<ShapeDescriptor>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::protobuf::RepeatedField<ShapeDescriptor> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::protobuf::RepeatedField<ShapeDescriptor> {
        ::std::mem::replace(&mut self.items, ::protobuf::RepeatedField::new())
    }

    // repeated string rules = 4;


    pub fn get_rules(&self) -> &[::std::string::String] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ShapeDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.fields {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fields)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.items)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != ShapeDescriptor_PrimitiveType::OBJECT {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        for value in &self.fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.rules {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != ShapeDescriptor_PrimitiveType::OBJECT {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        for v in &self.fields {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.items {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.rules {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShapeDescriptor {
        ShapeDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ShapeDescriptor_PrimitiveType>>(
                "type",
                |m: &ShapeDescriptor| { &m.field_type },
                |m: &mut ShapeDescriptor| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FieldDescriptor>>(
                "fields",
                |m: &ShapeDescriptor| { &m.fields },
                |m: &mut ShapeDescriptor| { &mut m.fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ShapeDescriptor>>(
                "items",
                |m: &ShapeDescriptor| { &m.items },
                |m: &mut ShapeDescriptor| { &mut m.items },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rules",
                |m: &ShapeDescriptor| { &m.rules },
                |m: &mut ShapeDescriptor| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShapeDescriptor>(
                "ShapeDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShapeDescriptor {
        static instance: ::protobuf::rt::LazyV2<ShapeDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShapeDescriptor::new)
    }
}

impl ::protobuf::Clear for ShapeDescriptor {
    fn clear(&mut self) {
        self.field_type = ShapeDescriptor_PrimitiveType::OBJECT;
        self.fields.clear();
        self.items.clear();
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShapeDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShapeDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ShapeDescriptor_PrimitiveType {
    OBJECT = 0,
    ARRAY = 1,
    STRING = 2,
    NUMBER = 3,
    BOOLEAN = 4,
    NULL = 5,
}

impl ::protobuf::ProtobufEnum for ShapeDescriptor_PrimitiveType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ShapeDescriptor_PrimitiveType> {
        match value {
            0 => ::std::option::Option::Some(ShapeDescriptor_PrimitiveType::OBJECT),
            1 => ::std::option::Option::Some(ShapeDescriptor_PrimitiveType::ARRAY),
            2 => ::std::option::Option::Some(ShapeDescriptor_PrimitiveType::STRING),
            3 => ::std::option::Option::Some(ShapeDescriptor_PrimitiveType::NUMBER),
            4 => ::std::option::Option::Some(ShapeDescriptor_PrimitiveType::BOOLEAN),
            5 => ::std::option::Option::Some(ShapeDescriptor_PrimitiveType::NULL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ShapeDescriptor_PrimitiveType] = &[
            ShapeDescriptor_PrimitiveType::OBJECT,
            ShapeDescriptor_PrimitiveType::ARRAY,
            ShapeDescriptor_PrimitiveType::STRING,
            ShapeDescriptor_PrimitiveType::NUMBER,
            ShapeDescriptor_PrimitiveType::BOOLEAN,
            ShapeDescriptor_PrimitiveType::NULL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ShapeDescriptor_PrimitiveType>("ShapeDescriptor.PrimitiveType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ShapeDescriptor_PrimitiveType {
}

impl ::std::default::Default for ShapeDescriptor_PrimitiveType {
    fn default() -> Self {
        ShapeDescriptor_PrimitiveType::OBJECT
    }
}

impl ::protobuf::reflect::ProtobufValue for ShapeDescriptor_PrimitiveType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fshapehash.proto\x12\x10optic_shape_hash\"`\n\x0fFieldDescriptor\
    \x12\x12\n\x03key\x18\x01\x20\x01(\tR\x03keyB\0\x127\n\x04hash\x18\x02\
    \x20\x01(\x0b2!.optic_shape_hash.ShapeDescriptorR\x04hashB\0:\0\"\xc3\
    \x02\n\x0fShapeDescriptor\x12E\n\x04type\x18\x01\x20\x01(\x0e2/.optic_sh\
    ape_hash.ShapeDescriptor.PrimitiveTypeR\x04typeB\0\x12;\n\x06fields\x18\
    \x02\x20\x03(\x0b2!.optic_shape_hash.FieldDescriptorR\x06fieldsB\0\x129\
    \n\x05items\x18\x03\x20\x03(\x0b2!.optic_shape_hash.ShapeDescriptorR\x05\
    itemsB\0\x12\x16\n\x05rules\x18\x04\x20\x03(\tR\x05rulesB\0\"W\n\rPrimit\
    iveType\x12\n\n\x06OBJECT\x10\0\x12\t\n\x05ARRAY\x10\x01\x12\n\n\x06STRI\
    NG\x10\x02\x12\n\n\x06NUMBER\x10\x03\x12\x0b\n\x07BOOLEAN\x10\x04\x12\
    \x08\n\x04NULL\x10\x05\x1a\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
